{"ast":null,"code":"var _jsxFileName = \"/home/meta-universe-linux1/Desktop/Workshop/photoshop-clone/frontend/src/components/CanvasEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Stage, Layer, Image as KonvaImage, Circle, Line, Transformer } from 'react-konva';\nimport useImage from 'use-image';\nimport axios from '../api';\nimport { HexColorPicker } from 'react-colorful';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasEditor = ({\n  project\n}) => {\n  _s();\n  const stageRef = useRef();\n  const transformerRef = useRef();\n  const [imageURL, setImageURL] = useState(null);\n  const [bgImage] = useImage(imageURL);\n  const [shapes, setShapes] = useState([]);\n  const [selectedId, setSelectedId] = useState(null);\n  const [drawingMode, setDrawingMode] = useState(null);\n  const [tempLinePoints, setTempLinePoints] = useState([]);\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const [color, setColor] = useState('#ff0000'); // default color\n\n  const fetchData = async () => {\n    try {\n      const res = await axios.get(`/projects/${project.id}/`);\n      const imageFile = res.data.image.image_file;\n      setImageURL(`${imageFile}`);\n      const layers = res.data.image.layers;\n      const parsedShapes = layers.map(layer => ({\n        id: layer.id,\n        type: layer.shape_type,\n        ...layer.properties,\n        isNew: false\n      }));\n      setShapes(parsedShapes);\n    } catch (error) {\n      console.error(\"Failed to fetch project data\", error);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, [project]);\n  const pushToUndo = () => {\n    setUndoStack(prev => [...prev, shapes.map(s => ({\n      ...s\n    }))]);\n    setRedoStack([]);\n  };\n  const undo = () => {\n    if (undoStack.length === 0) return;\n    const prevShapes = undoStack.pop();\n    setRedoStack(prev => [...prev, shapes]);\n    setUndoStack([...undoStack]);\n    setShapes(prevShapes);\n    setSelectedId(null);\n  };\n  const redo = () => {\n    if (redoStack.length === 0) return;\n    const nextShapes = redoStack.pop();\n    setUndoStack(prev => [...prev, shapes]);\n    setRedoStack([...redoStack]);\n    setShapes(nextShapes);\n    setSelectedId(null);\n  };\n  const addCircle = () => {\n    pushToUndo();\n    const newShape = {\n      id: `temp-${shapes.length + 1}`,\n      type: 'circle',\n      x: Math.random() * 300 + 50,\n      y: Math.random() * 300 + 50,\n      radius: 40,\n      fill: color,\n      isNew: true\n    };\n    setShapes([...shapes, newShape]);\n  };\n  const handleCanvasClick = e => {\n    if (drawingMode === 'line') {\n      const stage = stageRef.current.getStage();\n      const pointer = stage.getPointerPosition();\n      const newPoints = [...tempLinePoints, pointer.x, pointer.y];\n      if (newPoints.length === 4) {\n        pushToUndo();\n        const newLine = {\n          id: `temp-${shapes.length + 1}`,\n          type: 'line',\n          points: newPoints,\n          stroke: color,\n          strokeWidth: 3,\n          isNew: true\n        };\n        setShapes([...shapes, newLine]);\n        setTempLinePoints([]);\n        setDrawingMode(null);\n      } else {\n        setTempLinePoints(newPoints);\n      }\n    }\n  };\n  const changeColor = async newColor => {\n    if (!selectedId) return;\n    pushToUndo();\n    const updated = shapes.map(shape => {\n      if (shape.id === selectedId) {\n        if (shape.type === 'circle') return {\n          ...shape,\n          fill: newColor\n        };\n        if (shape.type === 'line') return {\n          ...shape,\n          stroke: newColor\n        };\n      }\n      return shape;\n    });\n    setShapes(updated);\n    if (typeof selectedId === 'number') {\n      const shapeToUpdate = updated.find(s => s.id === selectedId);\n      try {\n        const properties = {\n          ...shapeToUpdate\n        };\n        delete properties.id;\n        delete properties.type;\n        delete properties.isNew;\n        await axios.patch(`/layers/${selectedId}/`, {\n          properties\n        });\n      } catch (err) {\n        console.error('Failed to update color', err);\n      }\n    }\n  };\n  const saveNewLayers = async () => {\n    const imageId = project.image.id;\n    const newLayers = shapes.filter(s => s.isNew);\n    for (let i = 0; i < newLayers.length; i++) {\n      const shape = newLayers[i];\n      const payload = {\n        image: imageId,\n        layer_id: i + 1,\n        shape_type: shape.type,\n        properties: shape.type === 'circle' ? {\n          x: shape.x,\n          y: shape.y,\n          radius: shape.radius,\n          fill: shape.fill\n        } : {\n          points: shape.points,\n          stroke: shape.stroke,\n          strokeWidth: shape.strokeWidth\n        }\n      };\n      try {\n        const res = await axios.post('/layers/', payload);\n        setShapes(prev => prev.map(s => s.id === shape.id ? {\n          ...res.data,\n          isNew: false\n        } : s));\n      } catch (err) {\n        console.error('Save failed:', err);\n      }\n    }\n    await fetchData();\n    alert('New layers saved and refreshed!');\n  };\n  const updateShape = async (id, updates) => {\n    pushToUndo();\n    setShapes(prevShapes => prevShapes.map(shape => shape.id === id ? {\n      ...shape,\n      ...updates\n    } : shape));\n    if (typeof id === 'number') {\n      try {\n        const shapeToUpdate = shapes.find(s => s.id === id);\n        if (!shapeToUpdate) return;\n        let properties = {\n          ...shapeToUpdate,\n          ...updates\n        };\n        delete properties.id;\n        delete properties.type;\n        delete properties.isNew;\n        await axios.patch(`/layers/${id}/`, {\n          properties\n        });\n      } catch (err) {\n        console.error('Failed to update layer:', err);\n      }\n    }\n  };\n  const handleDragEnd = (e, id) => {\n    const {\n      x,\n      y\n    } = e.target.position();\n    updateShape(id, {\n      x,\n      y\n    });\n  };\n  const handleTransformEnd = (e, id) => {\n    const node = e.target;\n    let updates = {\n      x: node.x(),\n      y: node.y(),\n      rotation: node.rotation()\n    };\n    if (node.className === 'Circle') {\n      updates.radius = node.radius() * node.scaleX();\n    } else if (node.className === 'Line') {\n      const oldPoints = node.points();\n      const scaleX = node.scaleX();\n      const scaleY = node.scaleY();\n      updates.points = oldPoints.map((p, i) => i % 2 === 0 ? p * scaleX : p * scaleY);\n    }\n    node.scaleX(1);\n    node.scaleY(1);\n    updateShape(id, updates);\n  };\n  useEffect(() => {\n    const stage = stageRef.current;\n    const transformer = transformerRef.current;\n    if (!selectedId) {\n      var _transformer$getLayer;\n      transformer.nodes([]);\n      (_transformer$getLayer = transformer.getLayer()) === null || _transformer$getLayer === void 0 ? void 0 : _transformer$getLayer.batchDraw();\n      return;\n    }\n    const selectedNode = stage.findOne(`#${selectedId.toString()}`);\n    if (selectedNode) {\n      var _transformer$getLayer2;\n      transformer.nodes([selectedNode]);\n      (_transformer$getLayer2 = transformer.getLayer()) === null || _transformer$getLayer2 === void 0 ? void 0 : _transformer$getLayer2.batchDraw();\n    } else {\n      var _transformer$getLayer3;\n      transformer.nodes([]);\n      (_transformer$getLayer3 = transformer.getLayer()) === null || _transformer$getLayer3 === void 0 ? void 0 : _transformer$getLayer3.batchDraw();\n    }\n  }, [selectedId, shapes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(HexColorPicker, {\n        color: color,\n        onChange: setColor,\n        style: {\n          width: '200px',\n          height: '200px',\n          borderRadius: '8px',\n          boxShadow: '0 0 0 1px rgba(0, 0, 0, 0.1)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addCircle,\n          children: \"Add Circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setDrawingMode('line'),\n          children: \"Start Line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changeColor(color),\n          disabled: !selectedId,\n          children: \"Apply Color to Selected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveNewLayers,\n          children: \"Save New Layers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: undo,\n          disabled: undoStack.length === 0,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: redo,\n          disabled: redoStack.length === 0,\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stage, {\n      width: 800,\n      height: 600,\n      ref: stageRef,\n      onMouseDown: handleCanvasClick,\n      style: {\n        border: '1px solid #ccc'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Layer, {\n        children: bgImage && /*#__PURE__*/_jsxDEV(KonvaImage, {\n          image: bgImage,\n          width: 800,\n          height: 600\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Layer, {\n        children: shapes.map(shape => {\n          if (shape.type === 'circle') {\n            return /*#__PURE__*/_jsxDEV(Circle, {\n              id: shape.id.toString(),\n              x: shape.x,\n              y: shape.y,\n              radius: shape.radius,\n              fill: shape.fill,\n              draggable: true,\n              rotation: shape.rotation || 0,\n              onClick: () => setSelectedId(shape.id),\n              onTap: () => setSelectedId(shape.id),\n              onDragEnd: e => handleDragEnd(e, shape.id),\n              onTransformEnd: e => handleTransformEnd(e, shape.id)\n            }, shape.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 17\n            }, this);\n          } else if (shape.type === 'line') {\n            return /*#__PURE__*/_jsxDEV(Line, {\n              id: shape.id.toString(),\n              points: shape.points,\n              stroke: shape.stroke,\n              strokeWidth: shape.strokeWidth,\n              draggable: true,\n              rotation: shape.rotation || 0,\n              onClick: () => setSelectedId(shape.id),\n              onTap: () => setSelectedId(shape.id),\n              onDragEnd: e => handleDragEnd(e, shape.id),\n              onTransformEnd: e => handleTransformEnd(e, shape.id)\n            }, shape.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 17\n            }, this);\n          }\n          return null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Layer, {\n        children: /*#__PURE__*/_jsxDEV(Transformer, {\n          ref: transformerRef,\n          rotateEnabled: true,\n          enabledAnchors: ['top-left', 'top-right', 'bottom-left', 'bottom-right']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n};\n_s(CanvasEditor, \"mluwtitrLmpxRkuhT3GldDJSD8M=\", false, function () {\n  return [useImage];\n});\n_c = CanvasEditor;\nexport default CanvasEditor;\nvar _c;\n$RefreshReg$(_c, \"CanvasEditor\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Stage","Layer","Image","KonvaImage","Circle","Line","Transformer","useImage","axios","HexColorPicker","jsxDEV","_jsxDEV","CanvasEditor","project","_s","stageRef","transformerRef","imageURL","setImageURL","bgImage","shapes","setShapes","selectedId","setSelectedId","drawingMode","setDrawingMode","tempLinePoints","setTempLinePoints","undoStack","setUndoStack","redoStack","setRedoStack","color","setColor","fetchData","res","get","id","imageFile","data","image","image_file","layers","parsedShapes","map","layer","type","shape_type","properties","isNew","error","console","pushToUndo","prev","s","undo","length","prevShapes","pop","redo","nextShapes","addCircle","newShape","x","Math","random","y","radius","fill","handleCanvasClick","e","stage","current","getStage","pointer","getPointerPosition","newPoints","newLine","points","stroke","strokeWidth","changeColor","newColor","updated","shape","shapeToUpdate","find","patch","err","saveNewLayers","imageId","newLayers","filter","i","payload","layer_id","post","alert","updateShape","updates","handleDragEnd","target","position","handleTransformEnd","node","rotation","className","scaleX","oldPoints","scaleY","p","transformer","_transformer$getLayer","nodes","getLayer","batchDraw","selectedNode","findOne","toString","_transformer$getLayer2","_transformer$getLayer3","children","style","marginBottom","onChange","width","height","borderRadius","boxShadow","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","onClick","disabled","ref","onMouseDown","border","draggable","onTap","onDragEnd","onTransformEnd","rotateEnabled","enabledAnchors","_c","$RefreshReg$"],"sources":["/home/meta-universe-linux1/Desktop/Workshop/photoshop-clone/frontend/src/components/CanvasEditor.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { Stage, Layer, Image as KonvaImage, Circle, Line, Transformer } from 'react-konva';\r\nimport useImage from 'use-image';\r\nimport axios from '../api';\r\nimport { HexColorPicker } from 'react-colorful';\r\n\r\nconst CanvasEditor = ({ project }) => {\r\n  const stageRef = useRef();\r\n  const transformerRef = useRef();\r\n  const [imageURL, setImageURL] = useState(null);\r\n  const [bgImage] = useImage(imageURL);\r\n  const [shapes, setShapes] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(null);\r\n  const [drawingMode, setDrawingMode] = useState(null);\r\n  const [tempLinePoints, setTempLinePoints] = useState([]);\r\n  const [undoStack, setUndoStack] = useState([]);\r\n  const [redoStack, setRedoStack] = useState([]);\r\n  const [color, setColor] = useState('#ff0000'); // default color\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const res = await axios.get(`/projects/${project.id}/`);\r\n      const imageFile = res.data.image.image_file;\r\n      setImageURL(`${imageFile}`);\r\n\r\n      const layers = res.data.image.layers;\r\n      const parsedShapes = layers.map(layer => ({\r\n        id: layer.id,\r\n        type: layer.shape_type,\r\n        ...layer.properties,\r\n        isNew: false,\r\n      }));\r\n      setShapes(parsedShapes);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch project data\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [project]);\r\n\r\n  const pushToUndo = () => {\r\n    setUndoStack(prev => [...prev, shapes.map(s => ({ ...s }))]);\r\n    setRedoStack([]);\r\n  };\r\n\r\n  const undo = () => {\r\n    if (undoStack.length === 0) return;\r\n    const prevShapes = undoStack.pop();\r\n    setRedoStack(prev => [...prev, shapes]);\r\n    setUndoStack([...undoStack]);\r\n    setShapes(prevShapes);\r\n    setSelectedId(null);\r\n  };\r\n\r\n  const redo = () => {\r\n    if (redoStack.length === 0) return;\r\n    const nextShapes = redoStack.pop();\r\n    setUndoStack(prev => [...prev, shapes]);\r\n    setRedoStack([...redoStack]);\r\n    setShapes(nextShapes);\r\n    setSelectedId(null);\r\n  };\r\n\r\n  const addCircle = () => {\r\n    pushToUndo();\r\n    const newShape = {\r\n      id: `temp-${shapes.length + 1}`,\r\n      type: 'circle',\r\n      x: Math.random() * 300 + 50,\r\n      y: Math.random() * 300 + 50,\r\n      radius: 40,\r\n      fill: color,\r\n      isNew: true,\r\n    };\r\n    setShapes([...shapes, newShape]);\r\n  };\r\n\r\n  const handleCanvasClick = (e) => {\r\n    if (drawingMode === 'line') {\r\n      const stage = stageRef.current.getStage();\r\n      const pointer = stage.getPointerPosition();\r\n      const newPoints = [...tempLinePoints, pointer.x, pointer.y];\r\n\r\n      if (newPoints.length === 4) {\r\n        pushToUndo();\r\n        const newLine = {\r\n          id: `temp-${shapes.length + 1}`,\r\n          type: 'line',\r\n          points: newPoints,\r\n          stroke: color,\r\n          strokeWidth: 3,\r\n          isNew: true,\r\n        };\r\n        setShapes([...shapes, newLine]);\r\n        setTempLinePoints([]);\r\n        setDrawingMode(null);\r\n      } else {\r\n        setTempLinePoints(newPoints);\r\n      }\r\n    }\r\n  };\r\n\r\n  const changeColor = async (newColor) => {\r\n    if (!selectedId) return;\r\n    pushToUndo();\r\n    const updated = shapes.map((shape) => {\r\n      if (shape.id === selectedId) {\r\n        if (shape.type === 'circle') return { ...shape, fill: newColor };\r\n        if (shape.type === 'line') return { ...shape, stroke: newColor };\r\n      }\r\n      return shape;\r\n    });\r\n    setShapes(updated);\r\n\r\n    if (typeof selectedId === 'number') {\r\n      const shapeToUpdate = updated.find(s => s.id === selectedId);\r\n      try {\r\n        const properties = { ...shapeToUpdate };\r\n        delete properties.id;\r\n        delete properties.type;\r\n        delete properties.isNew;\r\n        await axios.patch(`/layers/${selectedId}/`, { properties });\r\n      } catch (err) {\r\n        console.error('Failed to update color', err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const saveNewLayers = async () => {\r\n    const imageId = project.image.id;\r\n    const newLayers = shapes.filter(s => s.isNew);\r\n\r\n    for (let i = 0; i < newLayers.length; i++) {\r\n      const shape = newLayers[i];\r\n      const payload = {\r\n        image: imageId,\r\n        layer_id: i + 1,\r\n        shape_type: shape.type,\r\n        properties: shape.type === 'circle' ? {\r\n          x: shape.x,\r\n          y: shape.y,\r\n          radius: shape.radius,\r\n          fill: shape.fill,\r\n        } : {\r\n          points: shape.points,\r\n          stroke: shape.stroke,\r\n          strokeWidth: shape.strokeWidth,\r\n        },\r\n      };\r\n      try {\r\n        const res = await axios.post('/layers/', payload);\r\n        setShapes(prev =>\r\n          prev.map(s =>\r\n            s.id === shape.id ? { ...res.data, isNew: false } : s\r\n          )\r\n        );\r\n      } catch (err) {\r\n        console.error('Save failed:', err);\r\n      }\r\n    }\r\n\r\n    await fetchData();\r\n    alert('New layers saved and refreshed!');\r\n  };\r\n\r\n  const updateShape = async (id, updates) => {\r\n    pushToUndo();\r\n\r\n    setShapes(prevShapes =>\r\n      prevShapes.map(shape =>\r\n        shape.id === id ? { ...shape, ...updates } : shape\r\n      )\r\n    );\r\n\r\n    if (typeof id === 'number') {\r\n      try {\r\n        const shapeToUpdate = shapes.find(s => s.id === id);\r\n        if (!shapeToUpdate) return;\r\n\r\n        let properties = { ...shapeToUpdate, ...updates };\r\n        delete properties.id;\r\n        delete properties.type;\r\n        delete properties.isNew;\r\n\r\n        await axios.patch(`/layers/${id}/`, { properties });\r\n      } catch (err) {\r\n        console.error('Failed to update layer:', err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDragEnd = (e, id) => {\r\n    const { x, y } = e.target.position();\r\n    updateShape(id, { x, y });\r\n  };\r\n\r\n  const handleTransformEnd = (e, id) => {\r\n    const node = e.target;\r\n    let updates = {\r\n      x: node.x(),\r\n      y: node.y(),\r\n      rotation: node.rotation(),\r\n    };\r\n\r\n    if (node.className === 'Circle') {\r\n      updates.radius = node.radius() * node.scaleX();\r\n    } else if (node.className === 'Line') {\r\n      const oldPoints = node.points();\r\n      const scaleX = node.scaleX();\r\n      const scaleY = node.scaleY();\r\n      updates.points = oldPoints.map((p, i) =>\r\n        i % 2 === 0 ? p * scaleX : p * scaleY\r\n      );\r\n    }\r\n    node.scaleX(1);\r\n    node.scaleY(1);\r\n\r\n    updateShape(id, updates);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const stage = stageRef.current;\r\n    const transformer = transformerRef.current;\r\n    if (!selectedId) {\r\n      transformer.nodes([]);\r\n      transformer.getLayer()?.batchDraw();\r\n      return;\r\n    }\r\n    const selectedNode = stage.findOne(`#${selectedId.toString()}`);\r\n    if (selectedNode) {\r\n      transformer.nodes([selectedNode]);\r\n      transformer.getLayer()?.batchDraw();\r\n    } else {\r\n      transformer.nodes([]);\r\n      transformer.getLayer()?.batchDraw();\r\n    }\r\n  }, [selectedId, shapes]);\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ marginBottom: 10 }}>\r\n      <HexColorPicker\r\n  color={color}\r\n  onChange={setColor}\r\n  style={{\r\n    width: '200px',\r\n    height: '200px',\r\n    borderRadius: '8px',\r\n    boxShadow: '0 0 0 1px rgba(0, 0, 0, 0.1)',\r\n  }}\r\n/>\r\n\r\n        <div style={{ marginTop: 10 }}>\r\n          <button onClick={addCircle}>Add Circle</button>\r\n          <button onClick={() => setDrawingMode('line')}>Start Line</button>\r\n          <button onClick={() => changeColor(color)} disabled={!selectedId}>Apply Color to Selected</button>\r\n          <button onClick={saveNewLayers}>Save New Layers</button>\r\n          <button onClick={undo} disabled={undoStack.length === 0}>Undo</button>\r\n          <button onClick={redo} disabled={redoStack.length === 0}>Redo</button>\r\n        </div>\r\n      </div>\r\n\r\n      <Stage\r\n        width={800}\r\n        height={600}\r\n        ref={stageRef}\r\n        onMouseDown={handleCanvasClick}\r\n        style={{ border: '1px solid #ccc' }}\r\n      >\r\n        <Layer>\r\n          {bgImage && <KonvaImage image={bgImage} width={800} height={600} />}\r\n        </Layer>\r\n\r\n        <Layer>\r\n          {shapes.map(shape => {\r\n            if (shape.type === 'circle') {\r\n              return (\r\n                <Circle\r\n                  key={shape.id}\r\n                  id={shape.id.toString()}\r\n                  x={shape.x}\r\n                  y={shape.y}\r\n                  radius={shape.radius}\r\n                  fill={shape.fill}\r\n                  draggable\r\n                  rotation={shape.rotation || 0}\r\n                  onClick={() => setSelectedId(shape.id)}\r\n                  onTap={() => setSelectedId(shape.id)}\r\n                  onDragEnd={e => handleDragEnd(e, shape.id)}\r\n                  onTransformEnd={e => handleTransformEnd(e, shape.id)}\r\n                />\r\n              );\r\n            } else if (shape.type === 'line') {\r\n              return (\r\n                <Line\r\n                  key={shape.id}\r\n                  id={shape.id.toString()}\r\n                  points={shape.points}\r\n                  stroke={shape.stroke}\r\n                  strokeWidth={shape.strokeWidth}\r\n                  draggable\r\n                  rotation={shape.rotation || 0}\r\n                  onClick={() => setSelectedId(shape.id)}\r\n                  onTap={() => setSelectedId(shape.id)}\r\n                  onDragEnd={e => handleDragEnd(e, shape.id)}\r\n                  onTransformEnd={e => handleTransformEnd(e, shape.id)}\r\n                />\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n        </Layer>\r\n\r\n        <Layer>\r\n          <Transformer\r\n            ref={transformerRef}\r\n            rotateEnabled={true}\r\n            enabledAnchors={['top-left', 'top-right', 'bottom-left', 'bottom-right']}\r\n          />\r\n        </Layer>\r\n      </Stage>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CanvasEditor;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,KAAK,EAAEC,KAAK,EAAEC,KAAK,IAAIC,UAAU,EAAEC,MAAM,EAAEC,IAAI,EAAEC,WAAW,QAAQ,aAAa;AAC1F,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAOC,KAAK,MAAM,QAAQ;AAC1B,SAASC,cAAc,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAMC,QAAQ,GAAGhB,MAAM,CAAC,CAAC;EACzB,MAAMiB,cAAc,GAAGjB,MAAM,CAAC,CAAC;EAC/B,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACqB,OAAO,CAAC,GAAGZ,QAAQ,CAACU,QAAQ,CAAC;EACpC,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAAC0B,WAAW,EAAEC,cAAc,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAAC4B,cAAc,EAAEC,iBAAiB,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC8B,SAAS,EAAEC,YAAY,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACgC,SAAS,EAAEC,YAAY,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACkC,KAAK,EAAEC,QAAQ,CAAC,GAAGnC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;;EAE/C,MAAMoC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,GAAG,GAAG,MAAM3B,KAAK,CAAC4B,GAAG,CAAC,aAAavB,OAAO,CAACwB,EAAE,GAAG,CAAC;MACvD,MAAMC,SAAS,GAAGH,GAAG,CAACI,IAAI,CAACC,KAAK,CAACC,UAAU;MAC3CvB,WAAW,CAAC,GAAGoB,SAAS,EAAE,CAAC;MAE3B,MAAMI,MAAM,GAAGP,GAAG,CAACI,IAAI,CAACC,KAAK,CAACE,MAAM;MACpC,MAAMC,YAAY,GAAGD,MAAM,CAACE,GAAG,CAACC,KAAK,KAAK;QACxCR,EAAE,EAAEQ,KAAK,CAACR,EAAE;QACZS,IAAI,EAAED,KAAK,CAACE,UAAU;QACtB,GAAGF,KAAK,CAACG,UAAU;QACnBC,KAAK,EAAE;MACT,CAAC,CAAC,CAAC;MACH5B,SAAS,CAACsB,YAAY,CAAC;IACzB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAEDrD,SAAS,CAAC,MAAM;IACdqC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACrB,OAAO,CAAC,CAAC;EAEb,MAAMuC,UAAU,GAAGA,CAAA,KAAM;IACvBvB,YAAY,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEjC,MAAM,CAACwB,GAAG,CAACU,CAAC,KAAK;MAAE,GAAGA;IAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5DvB,YAAY,CAAC,EAAE,CAAC;EAClB,CAAC;EAED,MAAMwB,IAAI,GAAGA,CAAA,KAAM;IACjB,IAAI3B,SAAS,CAAC4B,MAAM,KAAK,CAAC,EAAE;IAC5B,MAAMC,UAAU,GAAG7B,SAAS,CAAC8B,GAAG,CAAC,CAAC;IAClC3B,YAAY,CAACsB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEjC,MAAM,CAAC,CAAC;IACvCS,YAAY,CAAC,CAAC,GAAGD,SAAS,CAAC,CAAC;IAC5BP,SAAS,CAACoC,UAAU,CAAC;IACrBlC,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMoC,IAAI,GAAGA,CAAA,KAAM;IACjB,IAAI7B,SAAS,CAAC0B,MAAM,KAAK,CAAC,EAAE;IAC5B,MAAMI,UAAU,GAAG9B,SAAS,CAAC4B,GAAG,CAAC,CAAC;IAClC7B,YAAY,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEjC,MAAM,CAAC,CAAC;IACvCW,YAAY,CAAC,CAAC,GAAGD,SAAS,CAAC,CAAC;IAC5BT,SAAS,CAACuC,UAAU,CAAC;IACrBrC,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMsC,SAAS,GAAGA,CAAA,KAAM;IACtBT,UAAU,CAAC,CAAC;IACZ,MAAMU,QAAQ,GAAG;MACfzB,EAAE,EAAE,QAAQjB,MAAM,CAACoC,MAAM,GAAG,CAAC,EAAE;MAC/BV,IAAI,EAAE,QAAQ;MACdiB,CAAC,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE;MAC3BC,CAAC,EAAEF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE;MAC3BE,MAAM,EAAE,EAAE;MACVC,IAAI,EAAEpC,KAAK;MACXiB,KAAK,EAAE;IACT,CAAC;IACD5B,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAE0C,QAAQ,CAAC,CAAC;EAClC,CAAC;EAED,MAAMO,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,IAAI9C,WAAW,KAAK,MAAM,EAAE;MAC1B,MAAM+C,KAAK,GAAGxD,QAAQ,CAACyD,OAAO,CAACC,QAAQ,CAAC,CAAC;MACzC,MAAMC,OAAO,GAAGH,KAAK,CAACI,kBAAkB,CAAC,CAAC;MAC1C,MAAMC,SAAS,GAAG,CAAC,GAAGlD,cAAc,EAAEgD,OAAO,CAACX,CAAC,EAAEW,OAAO,CAACR,CAAC,CAAC;MAE3D,IAAIU,SAAS,CAACpB,MAAM,KAAK,CAAC,EAAE;QAC1BJ,UAAU,CAAC,CAAC;QACZ,MAAMyB,OAAO,GAAG;UACdxC,EAAE,EAAE,QAAQjB,MAAM,CAACoC,MAAM,GAAG,CAAC,EAAE;UAC/BV,IAAI,EAAE,MAAM;UACZgC,MAAM,EAAEF,SAAS;UACjBG,MAAM,EAAE/C,KAAK;UACbgD,WAAW,EAAE,CAAC;UACd/B,KAAK,EAAE;QACT,CAAC;QACD5B,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAEyD,OAAO,CAAC,CAAC;QAC/BlD,iBAAiB,CAAC,EAAE,CAAC;QACrBF,cAAc,CAAC,IAAI,CAAC;MACtB,CAAC,MAAM;QACLE,iBAAiB,CAACiD,SAAS,CAAC;MAC9B;IACF;EACF,CAAC;EAED,MAAMK,WAAW,GAAG,MAAOC,QAAQ,IAAK;IACtC,IAAI,CAAC5D,UAAU,EAAE;IACjB8B,UAAU,CAAC,CAAC;IACZ,MAAM+B,OAAO,GAAG/D,MAAM,CAACwB,GAAG,CAAEwC,KAAK,IAAK;MACpC,IAAIA,KAAK,CAAC/C,EAAE,KAAKf,UAAU,EAAE;QAC3B,IAAI8D,KAAK,CAACtC,IAAI,KAAK,QAAQ,EAAE,OAAO;UAAE,GAAGsC,KAAK;UAAEhB,IAAI,EAAEc;QAAS,CAAC;QAChE,IAAIE,KAAK,CAACtC,IAAI,KAAK,MAAM,EAAE,OAAO;UAAE,GAAGsC,KAAK;UAAEL,MAAM,EAAEG;QAAS,CAAC;MAClE;MACA,OAAOE,KAAK;IACd,CAAC,CAAC;IACF/D,SAAS,CAAC8D,OAAO,CAAC;IAElB,IAAI,OAAO7D,UAAU,KAAK,QAAQ,EAAE;MAClC,MAAM+D,aAAa,GAAGF,OAAO,CAACG,IAAI,CAAChC,CAAC,IAAIA,CAAC,CAACjB,EAAE,KAAKf,UAAU,CAAC;MAC5D,IAAI;QACF,MAAM0B,UAAU,GAAG;UAAE,GAAGqC;QAAc,CAAC;QACvC,OAAOrC,UAAU,CAACX,EAAE;QACpB,OAAOW,UAAU,CAACF,IAAI;QACtB,OAAOE,UAAU,CAACC,KAAK;QACvB,MAAMzC,KAAK,CAAC+E,KAAK,CAAC,WAAWjE,UAAU,GAAG,EAAE;UAAE0B;QAAW,CAAC,CAAC;MAC7D,CAAC,CAAC,OAAOwC,GAAG,EAAE;QACZrC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEsC,GAAG,CAAC;MAC9C;IACF;EACF,CAAC;EAED,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,MAAMC,OAAO,GAAG7E,OAAO,CAAC2B,KAAK,CAACH,EAAE;IAChC,MAAMsD,SAAS,GAAGvE,MAAM,CAACwE,MAAM,CAACtC,CAAC,IAAIA,CAAC,CAACL,KAAK,CAAC;IAE7C,KAAK,IAAI4C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACnC,MAAM,EAAEqC,CAAC,EAAE,EAAE;MACzC,MAAMT,KAAK,GAAGO,SAAS,CAACE,CAAC,CAAC;MAC1B,MAAMC,OAAO,GAAG;QACdtD,KAAK,EAAEkD,OAAO;QACdK,QAAQ,EAAEF,CAAC,GAAG,CAAC;QACf9C,UAAU,EAAEqC,KAAK,CAACtC,IAAI;QACtBE,UAAU,EAAEoC,KAAK,CAACtC,IAAI,KAAK,QAAQ,GAAG;UACpCiB,CAAC,EAAEqB,KAAK,CAACrB,CAAC;UACVG,CAAC,EAAEkB,KAAK,CAAClB,CAAC;UACVC,MAAM,EAAEiB,KAAK,CAACjB,MAAM;UACpBC,IAAI,EAAEgB,KAAK,CAAChB;QACd,CAAC,GAAG;UACFU,MAAM,EAAEM,KAAK,CAACN,MAAM;UACpBC,MAAM,EAAEK,KAAK,CAACL,MAAM;UACpBC,WAAW,EAAEI,KAAK,CAACJ;QACrB;MACF,CAAC;MACD,IAAI;QACF,MAAM7C,GAAG,GAAG,MAAM3B,KAAK,CAACwF,IAAI,CAAC,UAAU,EAAEF,OAAO,CAAC;QACjDzE,SAAS,CAACgC,IAAI,IACZA,IAAI,CAACT,GAAG,CAACU,CAAC,IACRA,CAAC,CAACjB,EAAE,KAAK+C,KAAK,CAAC/C,EAAE,GAAG;UAAE,GAAGF,GAAG,CAACI,IAAI;UAAEU,KAAK,EAAE;QAAM,CAAC,GAAGK,CACtD,CACF,CAAC;MACH,CAAC,CAAC,OAAOkC,GAAG,EAAE;QACZrC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEsC,GAAG,CAAC;MACpC;IACF;IAEA,MAAMtD,SAAS,CAAC,CAAC;IACjB+D,KAAK,CAAC,iCAAiC,CAAC;EAC1C,CAAC;EAED,MAAMC,WAAW,GAAG,MAAAA,CAAO7D,EAAE,EAAE8D,OAAO,KAAK;IACzC/C,UAAU,CAAC,CAAC;IAEZ/B,SAAS,CAACoC,UAAU,IAClBA,UAAU,CAACb,GAAG,CAACwC,KAAK,IAClBA,KAAK,CAAC/C,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAG+C,KAAK;MAAE,GAAGe;IAAQ,CAAC,GAAGf,KAC/C,CACF,CAAC;IAED,IAAI,OAAO/C,EAAE,KAAK,QAAQ,EAAE;MAC1B,IAAI;QACF,MAAMgD,aAAa,GAAGjE,MAAM,CAACkE,IAAI,CAAChC,CAAC,IAAIA,CAAC,CAACjB,EAAE,KAAKA,EAAE,CAAC;QACnD,IAAI,CAACgD,aAAa,EAAE;QAEpB,IAAIrC,UAAU,GAAG;UAAE,GAAGqC,aAAa;UAAE,GAAGc;QAAQ,CAAC;QACjD,OAAOnD,UAAU,CAACX,EAAE;QACpB,OAAOW,UAAU,CAACF,IAAI;QACtB,OAAOE,UAAU,CAACC,KAAK;QAEvB,MAAMzC,KAAK,CAAC+E,KAAK,CAAC,WAAWlD,EAAE,GAAG,EAAE;UAAEW;QAAW,CAAC,CAAC;MACrD,CAAC,CAAC,OAAOwC,GAAG,EAAE;QACZrC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEsC,GAAG,CAAC;MAC/C;IACF;EACF,CAAC;EAED,MAAMY,aAAa,GAAGA,CAAC9B,CAAC,EAAEjC,EAAE,KAAK;IAC/B,MAAM;MAAE0B,CAAC;MAAEG;IAAE,CAAC,GAAGI,CAAC,CAAC+B,MAAM,CAACC,QAAQ,CAAC,CAAC;IACpCJ,WAAW,CAAC7D,EAAE,EAAE;MAAE0B,CAAC;MAAEG;IAAE,CAAC,CAAC;EAC3B,CAAC;EAED,MAAMqC,kBAAkB,GAAGA,CAACjC,CAAC,EAAEjC,EAAE,KAAK;IACpC,MAAMmE,IAAI,GAAGlC,CAAC,CAAC+B,MAAM;IACrB,IAAIF,OAAO,GAAG;MACZpC,CAAC,EAAEyC,IAAI,CAACzC,CAAC,CAAC,CAAC;MACXG,CAAC,EAAEsC,IAAI,CAACtC,CAAC,CAAC,CAAC;MACXuC,QAAQ,EAAED,IAAI,CAACC,QAAQ,CAAC;IAC1B,CAAC;IAED,IAAID,IAAI,CAACE,SAAS,KAAK,QAAQ,EAAE;MAC/BP,OAAO,CAAChC,MAAM,GAAGqC,IAAI,CAACrC,MAAM,CAAC,CAAC,GAAGqC,IAAI,CAACG,MAAM,CAAC,CAAC;IAChD,CAAC,MAAM,IAAIH,IAAI,CAACE,SAAS,KAAK,MAAM,EAAE;MACpC,MAAME,SAAS,GAAGJ,IAAI,CAAC1B,MAAM,CAAC,CAAC;MAC/B,MAAM6B,MAAM,GAAGH,IAAI,CAACG,MAAM,CAAC,CAAC;MAC5B,MAAME,MAAM,GAAGL,IAAI,CAACK,MAAM,CAAC,CAAC;MAC5BV,OAAO,CAACrB,MAAM,GAAG8B,SAAS,CAAChE,GAAG,CAAC,CAACkE,CAAC,EAAEjB,CAAC,KAClCA,CAAC,GAAG,CAAC,KAAK,CAAC,GAAGiB,CAAC,GAAGH,MAAM,GAAGG,CAAC,GAAGD,MACjC,CAAC;IACH;IACAL,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC;IACdH,IAAI,CAACK,MAAM,CAAC,CAAC,CAAC;IAEdX,WAAW,CAAC7D,EAAE,EAAE8D,OAAO,CAAC;EAC1B,CAAC;EAEDtG,SAAS,CAAC,MAAM;IACd,MAAM0E,KAAK,GAAGxD,QAAQ,CAACyD,OAAO;IAC9B,MAAMuC,WAAW,GAAG/F,cAAc,CAACwD,OAAO;IAC1C,IAAI,CAAClD,UAAU,EAAE;MAAA,IAAA0F,qBAAA;MACfD,WAAW,CAACE,KAAK,CAAC,EAAE,CAAC;MACrB,CAAAD,qBAAA,GAAAD,WAAW,CAACG,QAAQ,CAAC,CAAC,cAAAF,qBAAA,uBAAtBA,qBAAA,CAAwBG,SAAS,CAAC,CAAC;MACnC;IACF;IACA,MAAMC,YAAY,GAAG7C,KAAK,CAAC8C,OAAO,CAAC,IAAI/F,UAAU,CAACgG,QAAQ,CAAC,CAAC,EAAE,CAAC;IAC/D,IAAIF,YAAY,EAAE;MAAA,IAAAG,sBAAA;MAChBR,WAAW,CAACE,KAAK,CAAC,CAACG,YAAY,CAAC,CAAC;MACjC,CAAAG,sBAAA,GAAAR,WAAW,CAACG,QAAQ,CAAC,CAAC,cAAAK,sBAAA,uBAAtBA,sBAAA,CAAwBJ,SAAS,CAAC,CAAC;IACrC,CAAC,MAAM;MAAA,IAAAK,sBAAA;MACLT,WAAW,CAACE,KAAK,CAAC,EAAE,CAAC;MACrB,CAAAO,sBAAA,GAAAT,WAAW,CAACG,QAAQ,CAAC,CAAC,cAAAM,sBAAA,uBAAtBA,sBAAA,CAAwBL,SAAS,CAAC,CAAC;IACrC;EACF,CAAC,EAAE,CAAC7F,UAAU,EAAEF,MAAM,CAAC,CAAC;EAExB,oBACET,OAAA;IAAA8G,QAAA,gBACE9G,OAAA;MAAK+G,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAG,CAAE;MAAAF,QAAA,gBACjC9G,OAAA,CAACF,cAAc;QACnBuB,KAAK,EAAEA,KAAM;QACb4F,QAAQ,EAAE3F,QAAS;QACnByF,KAAK,EAAE;UACLG,KAAK,EAAE,OAAO;UACdC,MAAM,EAAE,OAAO;UACfC,YAAY,EAAE,KAAK;UACnBC,SAAS,EAAE;QACb;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAEMzH,OAAA;QAAK+G,KAAK,EAAE;UAAEW,SAAS,EAAE;QAAG,CAAE;QAAAZ,QAAA,gBAC5B9G,OAAA;UAAQ2H,OAAO,EAAEzE,SAAU;UAAA4D,QAAA,EAAC;QAAU;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC/CzH,OAAA;UAAQ2H,OAAO,EAAEA,CAAA,KAAM7G,cAAc,CAAC,MAAM,CAAE;UAAAgG,QAAA,EAAC;QAAU;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAClEzH,OAAA;UAAQ2H,OAAO,EAAEA,CAAA,KAAMrD,WAAW,CAACjD,KAAK,CAAE;UAACuG,QAAQ,EAAE,CAACjH,UAAW;UAAAmG,QAAA,EAAC;QAAuB;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAClGzH,OAAA;UAAQ2H,OAAO,EAAE7C,aAAc;UAAAgC,QAAA,EAAC;QAAe;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACxDzH,OAAA;UAAQ2H,OAAO,EAAE/E,IAAK;UAACgF,QAAQ,EAAE3G,SAAS,CAAC4B,MAAM,KAAK,CAAE;UAAAiE,QAAA,EAAC;QAAI;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACtEzH,OAAA;UAAQ2H,OAAO,EAAE3E,IAAK;UAAC4E,QAAQ,EAAEzG,SAAS,CAAC0B,MAAM,KAAK,CAAE;UAAAiE,QAAA,EAAC;QAAI;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENzH,OAAA,CAACX,KAAK;MACJ6H,KAAK,EAAE,GAAI;MACXC,MAAM,EAAE,GAAI;MACZU,GAAG,EAAEzH,QAAS;MACd0H,WAAW,EAAEpE,iBAAkB;MAC/BqD,KAAK,EAAE;QAAEgB,MAAM,EAAE;MAAiB,CAAE;MAAAjB,QAAA,gBAEpC9G,OAAA,CAACV,KAAK;QAAAwH,QAAA,EACHtG,OAAO,iBAAIR,OAAA,CAACR,UAAU;UAACqC,KAAK,EAAErB,OAAQ;UAAC0G,KAAK,EAAE,GAAI;UAACC,MAAM,EAAE;QAAI;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9D,CAAC,eAERzH,OAAA,CAACV,KAAK;QAAAwH,QAAA,EACHrG,MAAM,CAACwB,GAAG,CAACwC,KAAK,IAAI;UACnB,IAAIA,KAAK,CAACtC,IAAI,KAAK,QAAQ,EAAE;YAC3B,oBACEnC,OAAA,CAACP,MAAM;cAELiC,EAAE,EAAE+C,KAAK,CAAC/C,EAAE,CAACiF,QAAQ,CAAC,CAAE;cACxBvD,CAAC,EAAEqB,KAAK,CAACrB,CAAE;cACXG,CAAC,EAAEkB,KAAK,CAAClB,CAAE;cACXC,MAAM,EAAEiB,KAAK,CAACjB,MAAO;cACrBC,IAAI,EAAEgB,KAAK,CAAChB,IAAK;cACjBuE,SAAS;cACTlC,QAAQ,EAAErB,KAAK,CAACqB,QAAQ,IAAI,CAAE;cAC9B6B,OAAO,EAAEA,CAAA,KAAM/G,aAAa,CAAC6D,KAAK,CAAC/C,EAAE,CAAE;cACvCuG,KAAK,EAAEA,CAAA,KAAMrH,aAAa,CAAC6D,KAAK,CAAC/C,EAAE,CAAE;cACrCwG,SAAS,EAAEvE,CAAC,IAAI8B,aAAa,CAAC9B,CAAC,EAAEc,KAAK,CAAC/C,EAAE,CAAE;cAC3CyG,cAAc,EAAExE,CAAC,IAAIiC,kBAAkB,CAACjC,CAAC,EAAEc,KAAK,CAAC/C,EAAE;YAAE,GAXhD+C,KAAK,CAAC/C,EAAE;cAAA4F,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAYd,CAAC;UAEN,CAAC,MAAM,IAAIhD,KAAK,CAACtC,IAAI,KAAK,MAAM,EAAE;YAChC,oBACEnC,OAAA,CAACN,IAAI;cAEHgC,EAAE,EAAE+C,KAAK,CAAC/C,EAAE,CAACiF,QAAQ,CAAC,CAAE;cACxBxC,MAAM,EAAEM,KAAK,CAACN,MAAO;cACrBC,MAAM,EAAEK,KAAK,CAACL,MAAO;cACrBC,WAAW,EAAEI,KAAK,CAACJ,WAAY;cAC/B2D,SAAS;cACTlC,QAAQ,EAAErB,KAAK,CAACqB,QAAQ,IAAI,CAAE;cAC9B6B,OAAO,EAAEA,CAAA,KAAM/G,aAAa,CAAC6D,KAAK,CAAC/C,EAAE,CAAE;cACvCuG,KAAK,EAAEA,CAAA,KAAMrH,aAAa,CAAC6D,KAAK,CAAC/C,EAAE,CAAE;cACrCwG,SAAS,EAAEvE,CAAC,IAAI8B,aAAa,CAAC9B,CAAC,EAAEc,KAAK,CAAC/C,EAAE,CAAE;cAC3CyG,cAAc,EAAExE,CAAC,IAAIiC,kBAAkB,CAACjC,CAAC,EAAEc,KAAK,CAAC/C,EAAE;YAAE,GAVhD+C,KAAK,CAAC/C,EAAE;cAAA4F,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAWd,CAAC;UAEN;UACA,OAAO,IAAI;QACb,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eAERzH,OAAA,CAACV,KAAK;QAAAwH,QAAA,eACJ9G,OAAA,CAACL,WAAW;UACVkI,GAAG,EAAExH,cAAe;UACpB+H,aAAa,EAAE,IAAK;UACpBC,cAAc,EAAE,CAAC,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE,cAAc;QAAE;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1E;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACtH,EAAA,CA/TIF,YAAY;EAAA,QAIEL,QAAQ;AAAA;AAAA0I,EAAA,GAJtBrI,YAAY;AAiUlB,eAAeA,YAAY;AAAC,IAAAqI,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}